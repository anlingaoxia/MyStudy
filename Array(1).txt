66. Plus One
数组最后一位+1
    public int[] plusOne(int[] digits) {
        boolean plus = true;
        for (int i = digits.length - 1; i >= 0; i--) {
            if (plus ) {
                if (++digits[i] > 9) {
                    digits[i] = 0;
                } else plus = false;
            } 
            if (!plus) break;
        }
        
        if (plus) {
            int[] newPlus = new int[digits.length + 1];
            newPlus[0] = 1;
            return newPlus;
        } 
        return digits;
    }

=====
119. Pascal's Triangle II
输出第k行杨辉三角
    public static List<Integer> getRow(int rowIndex) {
        Integer[] row = new Integer[rowIndex + 1];
        Arrays.fill(row, 0);
        row[0] = 1;
        for (int i = 1; i < row.length; i++) {
            for (int j = i; j >= 1; j--) {
                row[j] += row[j - 1];
            }
        }
        return Arrays.asList(row);
    }
=====
561. Array Partition I
给2n个integers,group这些integers到n对，使得这n对的min(a,b)最大
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int result = 0;
        for (int i = 0; i < nums.length; i += 2) {
            result += nums[i];
        }
        return result;
    }

=====
1. Two Sum
给一个整形数组，一个target，返回加起来等于target的元素的下标
使用hashmap保存之前的需要对比的数。
public int[] twoSum(int[] numbers, int target) {
    int[] result = new int[2];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < numbers.length; i++) {
        if (map.containsKey(target - numbers[i])) {
            result[1] = i + 1;
            result[0] = map.get(target - numbers[i]);
            return result;
        }
        map.put(numbers[i], i + 1);
    }
    return result;
}
=====
448. Find All Numbers Disappeared in an Array
给定一个大小为n的整形数组1<=a[i]<=n,一些出现两次，一些出现一次，在数组中找出所有没有出现过的的[1,n]的元素
使用负数进行标注可以进行顺序判断。
使用0、-1进行标注，则下一个被判断的下标必须为被标注的数组元素的值。
    public    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int positive = nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3];
        int negative = nums[0] * nums[1] * nums[nums.length - 1];
        return Math.max(positive, negative);
    } List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<Integer>();
        for(int i = 0; i < nums.length; i++) {
            int val = Math.abs(nums[i]) - 1;
            if(nums[val] > 0) {
                nums[val] = -nums[val];
            }
        }
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] > 0) {
                ret.add(i+1);
            }
        }
        return ret;
    }
=====
167. Two Sum II - Input array is sorted
给定一个已经按升序排列的整形数组，找到两个加起来等于target的数。返回这两个数的数组下标，index1必须小于index2.
    public int[] twoSum(int[] numbers, int target) {
        int index1 = 0;
        int index2 = numbers.length - 1;
        while (index1 < index2) {
            int sum = numbers[index1] + numbers[index2];
            if (sum == target) break;
            else if (sum > target) {
                index2--;
            } else if (sum < target) {
                index1++;
            }
        }

        return new int[] { index1 + 1, index2 + 1 };
    }

=====
26. Remove Duplicates from Sorted Array
给定一个大小为n的已排序数组，删除重复的地方，使每个元素只出现一次，并返回新的长度。
    public static int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;
        int last = nums[0];
        int duplicate = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != last) {
                nums[duplicate] = nums[i];
                last = nums[i];
                duplicate++;
            }
        }
        return duplicate;
    }
   public static int removeDuplicates2(int[] A) {
        if (A.length==0) return 0;
        int j=0;
        for (int i=0; i<A.length; i++)
            if (A[i]!=A[j]) A[++j]=A[i];
        return ++j;
    }

=====
27. Remove Element
给定一个数组和一个值，删除该值的所有实例，并返回新的长度
    public int removeElement(int[] nums, int val) {
        int duplicate = 0;
        for (int i = 0; i < nums.length; i++) {
             if (nums[i] != val) {
                 nums[duplicate] = nums[i];
                 duplicate++;
             }
        }
        return duplicate;
    }

=====
169. Majority Element
给定一个大小为n的数组，找到出现大于[n/2]次数的元素。
    public int majorityElement(int[] nums) {
        int k = sort(nums, 0, nums.length - 1, (nums.length - 1) / 2);
        while (nums[nums.length / 2] != nums[k]) {
            k = sort(nums, 0, nums.length - 1, (nums.length - 1) / 2);
        }
        return nums[k];
    }

    public int sort(int[] nums, int i, int j, int k) {
        int key = nums[k];
        nums[k] = nums[i];
        nums[i] = key;
        while (i < j) {
            while (i < j && nums[j] >= key)
                j--;
            if (i < j) nums[i++] = nums[j];
            while (i < j && nums[i] < key)
                i++;
            if (i < j) nums[j--] = nums[i];
        }
        nums[i] = key;
        return i;
    }

===
    public int majorityElement(int[] nums) {
        int major = nums[0];
        int count = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == major) count++;
            else if (nums[i] != major) {
                if(count == 0) {
                    major = nums[i];
                    count++;
                } else {
                    count--;
                }
            }
        }
        return major;
    }

=====
581. Shortest Unsorted Continuous Subarray
给定一个整形数组，你需要找到一个连续子数组满足：如果这个子数组按升序排列，那么整个数组就能按升序排列。（找到最短子数组）
    public int findUnsortedSubarray(int[] nums) {
        int start = -1;
        int end = -2;
        int max = nums[0];
        int min = nums[nums.length - 1];
        for (int i = 1; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            min = Math.min(min, nums[nums.length - i - 1]);
            if (nums[i] < max) end = i;
            if (nums[nums.length - i - 1] > min) start = nums.length - i - 1;
        }
        return end - start + 1;
    }
10=====
566. Reshape the Matrix
m*n矩阵转换为r*c的矩阵
    public int[][] matrixReshape(int[][] nums, int r, int c) {
        int rows = nums.length;
        int cols = nums[0].length;
        if (rows * cols != r * c) return nums;
        int[][] newMatrix = new int[r][c];
        for (int i = 0; i < r * c; i++) {
            newMatrix[i / c][i % c] = nums[i / cols][i % cols];
        }
        return newMatrix;
    }
=====
35. Search Insert Position
给定一个已经排序的数组和定值，输出它所在的位置或者它应该插入的位置。
(最后一次的start就应该是它该在的位置)
    public int searchInsert(int[] nums, int target) {
        int start = 0;
        int end = nums.length - 1;
        int mid = 0;
        while (start <= end) {
            mid = (start + end) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) start = mid + 1;
            else end = mid - 1;
        }
	return start;
    }
======
88. Merge Sorted Array
给定两个已经排序的整形数组npublic int findPairs(int[] nums, int k) {
        
    }ums1和nums2，将两个数组整合（可以认为nums1的长度足够大）
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int t1 = m - 1;
        int t2 = n - 1;
        for (int i = (m + n - 1); i >= 0; i--) {
            if (t1 < 0) {
                nums1[i] = nums2[t2--];
            } else if (t2 < 0) {
                nums1[i] = nums1[t1--];
            } else if (nums1[t1] > nums2[t2]) {
                nums1[i] = nums1[t1--];
            } else {
                nums1[i] = nums2[t2--];
            }
        }
    }

=====
414. Third Maximum Number
给定一个非空整形数组,返回这个数组第三大的数,如果不存在,返回最大的数.(必须O(n))
(给出一个例子,如何初始化一个区别于任何int数值的int型变量, 使用Integer)

    public static int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null;
        Integer max3 = nupublic int findPairs(int[] nums, int k) {
        
    }ll;
        for (Integer n : nums) {
            if (n.equals(max1) || n.equals(max2) || n.equals(max3)) continue;
            if (max1 == null || n > max1) {
                max3 = max2;
                max2 = max1;
                max1 = n;
            } else if (max2 == null || n > max2) {
                max3 = max2;
                max2 = n;
            } else if (max3 == null || n > max3) {
                max3 = n;
            }
        }
        return max3 == null ? max1 == null ? -1 : max1 : max3;
    }
======
628. Maximum Product of Three Numbers
给定一个整型数组,找到乘积最大的三个数.
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        int positive = nums[nums.length - 1] * nums[nums.length - 2] * nums[nums.length - 3];
        int negative = nums[0] * nums[1] * nums[nums.length - 1];
        return Math.max(positive, negative);
    }
15=====
643. Maximum Average Subarray I
给定一个包含n个整形数的数组,找到连续的子数组长度为k有着最大的平均值.输出最大的平均值.
    public static double findMaxAverage(int[] nums, int k) {
        int window = 0;
        for (int i = 0; i < k; i++) {
            window += nums[i];
        }
        double max = window;
        double count = window;
        for (int i = 0; i < nums.length - k; i++) {
            count = count - nums[i] + nums[i + k];
            if (count > max) max = count;
        }
        return max / k;
    }
=====
283. Move Zeroes
给定一个数组,移动所有的0到数组最后并保持所有非0元素的相对位置.
    public static void moveZeroes(int[] nums) {
        int nonZeroIndex = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[nonZeroIndex] = nums[i];
                nonZeroIndex++;
            }
        }
        for (int i = nonZeroIndex; i < nums.length; i++) {
            nums[i] = 0;
        }
    }
=====
532. K-diff Pairs in an Array
给定一个整形数组和一个整数k,找到绝对差等于k共有几对.
(给定范围的统计用hash表)
(没有给定范围的统计用hashMap)
    public int findPairs(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k < 0)   return 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        Set<Integer> set = map.keySet();
        int count = 0;
        for (int tmp : set) {
            if (k == 0 && map.getOrDefault(tmp, 0) >= 2) count++;
            else if (k != 0 && map.getOrDefault(tmp + k, 0) != 0) count++;
        }
        return count;
    }
=====
(x)122. Best Time to Buy and Sell Stock II
有一个数组,第i个元素是day i的股票价格.
设计一个算法找出最大的利润,可以进行尽可能多的交易,但是必须卖出后再进行新的交易.
    public static int maxProfit(int[] prices) {
        int max = 0;
        for (int i = 1; i < prices.length; i++) {
            int thisProfit = prices[i] - prices[i - 1];
            if (thisProfit > 0) {
                max += thisProfit;
            }
        }
        return max;
    }
=====
605. Can Place Flowers
假设你有一个很长的花坛，部分地块种植和一些不。然而，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。给定一个数组,0表示没有种植,1表示已经种植,和一个数字N,返回是否能再种植N个.
/
	









