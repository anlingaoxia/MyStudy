162. Find Peak Element
峰元素就是比周围元素大的元素。给定一个数组，nums[i]不等于num[i+1],找出峰元素并返回下标。
数组可能包含多个峰，返回任何一个峰都可以。
    public int findPeakElement(int[] nums) {
        return peadSearch(nums, 0, nums.length - 1);
    }
//针对mid和mid周围的值情况分为4中情况，其中有两种情况可以相同。
    public int peadSearch(int[] nums, int start, int end) {
        if (start == end) {
            return start;
        } else if (start == end - 1) {
            return nums[start] > nums[end] ? start : end;
        } else {
            int mid = ((start >> 1) + (end >> 1));
            if (nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]) {
                return mid;
            } else if (nums[mid] > nums[mid - 1] && nums[mid] < nums[mid + 1]) {
                return peadSearch(nums, mid + 1, end);
            } else {
                return peadSearch(nums, start, mid - 1);
            }
        }
    }
=====
153. Find Minimum in Rotated Sorted Array
找出旋转数组的最小值。
    public int findMin(int[] nums) {
        return findHelper(nums, 0, nums.length - 1);
    }

    public int findHelper(int[] nums, int start, int end) {
        if (start == end) return nums[start];
        else if (start == end - 1) return nums[start] < nums[end] ? nums[start] : nums[end];
        else {
            int mid = ((start >> 1) + (end >> 1));
            if (nums[mid] > nums[end]) return findHelper(nums, mid + 1, end);
            else if (nums[mid] < nums[end]) return findHelper(nums, start, mid);
            else {
                if (nums[mid] > nums[start]) return findHelper(nums, start, mid - 1);
                else if (nums[mid] < nums[start]) return findHelper(nums, start + 1, mid);
                else return findHelper(nums, start + 1, end - 1);
            }
        }
    }
=====
152. Maximum Product Subarray
在一个数组中找出连续子数组（至少包含一个数）的乘积最大。
    public int maxProduct(int[] nums) {
        int thisMax = nums[0];
        int thisMin = nums[0];
        int p = nums[0];
        for (int i = 1 ; i < nums.length; i++) {
            if (nums[i] < 0) {
                thisMax = thisMax ^ thisMin;
                thisMin = thisMax ^ thisMin;
                thisMax = thisMax ^ thisMin;
            }
            thisMax = Math.max(nums[i], nums[i] * thisMax);
            thisMin = Math.min(nums[i], nums[i] * thisMin);
            p = Math.max(p, thisMax);
        }
        
        return p;
    }
=====
120. Triangle
给定一个三角形，找出最小路径从top到bottom，只能移动到相邻的位置。



























